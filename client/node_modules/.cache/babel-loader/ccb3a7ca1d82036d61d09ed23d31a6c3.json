{"ast":null,"code":"import _defineProperty from \"/Users/aponsaha/Desktop/Node/React/schedulefront/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/aponsaha/Desktop/Node/React/schedulefront/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/aponsaha/Desktop/Node/React/schedulefront/src/component/delete.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect } from 'react';\nimport MaterialTable from 'material-table';\nexport default function DeleteTable() {\n  const _React$useState = React.useState({\n    columns: [{\n      title: 'Name',\n      field: 'Subject'\n    }, {\n      title: 'StartTime',\n      field: 'StartTime'\n    }, {\n      title: 'End Time',\n      field: 'EndTime'\n    }, {\n      title: 'Discription',\n      field: 'Description'\n    }],\n    data: []\n  }),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        state = _React$useState2[0],\n        setState = _React$useState2[1];\n\n  useEffect(() => {\n    fetch('http://gitscheduleapp.herokuapp.com/api/groups').then(response => response.json()).then(group => {\n      //this.setState({data: user, loading: false},()=>{console.log('state',this.state.data);\n      // })\n      let newData = _objectSpread({}, state);\n\n      newData.data = group; // const items = group.map((item, key) => { item.group = '1' }\n      // )\n\n      console.log('delete'); //const sections = group.map((r, i) => { r.status = '1' });\n\n      setState(newData);\n    });\n  }, []);\n\n  const onDelete = id => {\n    fetch(\"http://gitscheduleapp.herokuapp.com/api/group/\".concat(id), {\n      method: 'DELETE',\n      headers: {\n        'content-type': 'application/json'\n      }\n    }).then(res => res.json()).then(res => console.log('Data Deleted ', res)); //setState(state.data)\n\n    window.location.reload(); //console.log(state.data,'state data after deletation ');\n  };\n\n  return React.createElement(MaterialTable, {\n    title: \"Editable Example\",\n    columns: state.columns,\n    data: state.data,\n    editable: {\n      onRowAdd: newData => new Promise(resolve => {\n        setTimeout(() => {\n          resolve();\n          const data = [...state.data];\n          data.push(newData);\n          setState(_objectSpread({}, state, {\n            data\n          }));\n        }, 600);\n      }),\n      onRowUpdate: (newData, oldData) => new Promise(resolve => {\n        setTimeout(() => {\n          resolve();\n          const data = [...state.data];\n          let updateAt = -1;\n          data.forEach((value, index) => {\n            if (JSON.stringify(value, [\"Subject\", \"StartTime\", \"EndTime\", \"Description\"]) === JSON.stringify(oldData, [\"Subject\", \"StartTime\", \"EndTime\", \"Description\"])) {\n              updateAt = index;\n            }\n          });\n          data[updateAt] = newData;\n          setState(_objectSpread({}, state, {\n            data\n          }));\n        }, 600);\n      }),\n      onRowDelete: oldData => new Promise(resolve => {\n        setTimeout(() => {\n          onDelete(oldData._id);\n          resolve();\n          setState(prevState => {\n            const data = [...prevState.data];\n            data.splice(data.indexOf(1), 1);\n            return _objectSpread({}, prevState, {\n              data\n            });\n          }); //console.log(oldData._id);                            \n        }, 600);\n      })\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  });\n}","map":{"version":3,"sources":["/Users/aponsaha/Desktop/Node/React/schedulefront/src/component/delete.js"],"names":["React","useEffect","MaterialTable","DeleteTable","useState","columns","title","field","data","state","setState","fetch","then","response","json","group","newData","console","log","onDelete","id","method","headers","res","window","location","reload","onRowAdd","Promise","resolve","setTimeout","push","onRowUpdate","oldData","updateAt","forEach","value","index","JSON","stringify","onRowDelete","_id","prevState","splice","indexOf"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport MaterialTable from 'material-table';\n\nexport default function DeleteTable() {\n    const [state, setState] = React.useState({\n        columns: [\n            { title: 'Name', field: 'Subject' },\n            { title: 'StartTime', field: 'StartTime' },\n            { title: 'End Time', field: 'EndTime' },\n            { title: 'Discription', field: 'Description' },\n\n        ],\n        data: [\n\n        ],\n    });\n\n    useEffect(() => {\n        fetch('http://gitscheduleapp.herokuapp.com/api/groups')\n            .then(response => response.json())\n            .then(group => {\n                //this.setState({data: user, loading: false},()=>{console.log('state',this.state.data);\n                // })\n\n                let newData = { ...state }\n                newData.data = group\n                // const items = group.map((item, key) => { item.group = '1' }\n                // )\n                console.log('delete');\n                //const sections = group.map((r, i) => { r.status = '1' });\n                setState(newData)\n            })\n    }, []);\n\n    const onDelete = (id) => {\n        fetch(`http://gitscheduleapp.herokuapp.com/api/group/${id}`, {\n            method: 'DELETE',\n            headers: { 'content-type': 'application/json' },\n        })\n            .then(res => res.json())\n\n            .then(res => console.log('Data Deleted ', res))\n        \n        \n\n        //setState(state.data)\n        \n        window.location.reload()\n\n\n        //console.log(state.data,'state data after deletation ');\n\n    }\n\n\n\n    return (\n        <MaterialTable\n            title=\"Editable Example\"\n            columns={state.columns}\n            data={state.data}\n            editable={{\n                onRowAdd: newData =>\n                    new Promise(resolve => {\n                        setTimeout(() => {\n                            resolve();\n                            const data = [...state.data];\n                            data.push(newData);\n                            setState({ ...state, data });\n                        }, 600);\n                    }),\n                onRowUpdate: (newData, oldData) =>\n                    new Promise(resolve => {\n                        setTimeout(() => {\n                            resolve();\n                            const data = [...state.data];\n                            let updateAt = -1\n                            data.forEach((value, index) => {\n                                if (JSON.stringify(value, [\"Subject\", \"StartTime\", \"EndTime\",\"Description\"])\n                                    === JSON.stringify(oldData, [\"Subject\", \"StartTime\", \"EndTime\",\"Description\"])) { updateAt = index }\n                            })\n                            data[updateAt] = newData;\n                            setState({ ...state, data })\n                        }, 600);\n                    }),\n                onRowDelete: (oldData) =>\n                    new Promise(resolve => {\n                        setTimeout(() => {\n                            onDelete(oldData._id)\n                            resolve();\n                            setState(prevState => {\n                                const data = [...prevState.data]\n                                data.splice(data.indexOf(1), 1)\n                                return { ...prevState, data }\n\n                            })\n                            //console.log(oldData._id);                            \n                        }, 600);\n                    }),\n\n            }}\n        />\n    );\n}"]},"metadata":{},"sourceType":"module"}